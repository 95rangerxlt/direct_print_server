// Code generated by protoc-gen-go.
// source: print.proto
// DO NOT EDIT!

/*
Package print is a generated protocol buffer package.

It is generated from these files:
	print.proto

It has these top-level messages:
	PrintContent
	PrintInfo
	PageRange
	PrintResponse
	Empty
	PageSize
	Resolution
	PrintServ
	PrintServices
*/
package print

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing the print content.
type PrintContent struct {
	// Types that are valid to be assigned to PrintContentType:
	//	*PrintContent_PrintInfo
	//	*PrintContent_Content
	PrintContentType isPrintContent_PrintContentType `protobuf_oneof:"print_content_type"`
}

func (m *PrintContent) Reset()                    { *m = PrintContent{} }
func (m *PrintContent) String() string            { return proto.CompactTextString(m) }
func (*PrintContent) ProtoMessage()               {}
func (*PrintContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isPrintContent_PrintContentType interface {
	isPrintContent_PrintContentType()
}

type PrintContent_PrintInfo struct {
	PrintInfo *PrintInfo `protobuf:"bytes,1,opt,name=printInfo,oneof"`
}
type PrintContent_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*PrintContent_PrintInfo) isPrintContent_PrintContentType() {}
func (*PrintContent_Content) isPrintContent_PrintContentType()   {}

func (m *PrintContent) GetPrintContentType() isPrintContent_PrintContentType {
	if m != nil {
		return m.PrintContentType
	}
	return nil
}

func (m *PrintContent) GetPrintInfo() *PrintInfo {
	if x, ok := m.GetPrintContentType().(*PrintContent_PrintInfo); ok {
		return x.PrintInfo
	}
	return nil
}

func (m *PrintContent) GetContent() []byte {
	if x, ok := m.GetPrintContentType().(*PrintContent_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PrintContent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PrintContent_OneofMarshaler, _PrintContent_OneofUnmarshaler, _PrintContent_OneofSizer, []interface{}{
		(*PrintContent_PrintInfo)(nil),
		(*PrintContent_Content)(nil),
	}
}

func _PrintContent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PrintContent)
	// print_content_type
	switch x := m.PrintContentType.(type) {
	case *PrintContent_PrintInfo:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrintInfo); err != nil {
			return err
		}
	case *PrintContent_Content:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Content)
	case nil:
	default:
		return fmt.Errorf("PrintContent.PrintContentType has unexpected type %T", x)
	}
	return nil
}

func _PrintContent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PrintContent)
	switch tag {
	case 1: // print_content_type.printInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrintInfo)
		err := b.DecodeMessage(msg)
		m.PrintContentType = &PrintContent_PrintInfo{msg}
		return true, err
	case 2: // print_content_type.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.PrintContentType = &PrintContent_Content{x}
		return true, err
	default:
		return false, nil
	}
}

func _PrintContent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PrintContent)
	// print_content_type
	switch x := m.PrintContentType.(type) {
	case *PrintContent_PrintInfo:
		s := proto.Size(x.PrintInfo)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrintContent_Content:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PrintInfo struct {
	PrinterName    string       `protobuf:"bytes,1,opt,name=printerName" json:"printerName,omitempty"`
	MediaSize      string       `protobuf:"bytes,2,opt,name=mediaSize" json:"mediaSize,omitempty"`
	Orientation    int32        `protobuf:"varint,3,opt,name=orientation" json:"orientation,omitempty"`
	PageSizeWidth  int32        `protobuf:"varint,4,opt,name=pageSizeWidth" json:"pageSizeWidth,omitempty"`
	PageSizeHeight int32        `protobuf:"varint,5,opt,name=pageSizeHeight" json:"pageSizeHeight,omitempty"`
	ColorMode      int32        `protobuf:"varint,6,opt,name=colorMode" json:"colorMode,omitempty"`
	DuplexMode     int32        `protobuf:"varint,7,opt,name=duplexMode" json:"duplexMode,omitempty"`
	PageRange      []*PageRange `protobuf:"bytes,8,rep,name=pageRange" json:"pageRange,omitempty"`
	Copies         int32        `protobuf:"varint,9,opt,name=copies" json:"copies,omitempty"`
	Label          string       `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`
	CreationTime   int64        `protobuf:"varint,11,opt,name=creationTime" json:"creationTime,omitempty"`
}

func (m *PrintInfo) Reset()                    { *m = PrintInfo{} }
func (m *PrintInfo) String() string            { return proto.CompactTextString(m) }
func (*PrintInfo) ProtoMessage()               {}
func (*PrintInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrintInfo) GetPageRange() []*PageRange {
	if m != nil {
		return m.PageRange
	}
	return nil
}

type PageRange struct {
	StartPage int32 `protobuf:"varint,1,opt,name=startPage" json:"startPage,omitempty"`
	EndPage   int32 `protobuf:"varint,2,opt,name=endPage" json:"endPage,omitempty"`
}

func (m *PageRange) Reset()                    { *m = PageRange{} }
func (m *PageRange) String() string            { return proto.CompactTextString(m) }
func (*PageRange) ProtoMessage()               {}
func (*PageRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// The response message containing the result
type PrintResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *PrintResponse) Reset()                    { *m = PrintResponse{} }
func (m *PrintResponse) String() string            { return proto.CompactTextString(m) }
func (*PrintResponse) ProtoMessage()               {}
func (*PrintResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PageSize struct {
	Label      string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	WidthMils  int32  `protobuf:"varint,2,opt,name=widthMils" json:"widthMils,omitempty"`
	HeightMils int32  `protobuf:"varint,3,opt,name=heightMils" json:"heightMils,omitempty"`
	IsDefault  bool   `protobuf:"varint,4,opt,name=isDefault" json:"isDefault,omitempty"`
}

func (m *PageSize) Reset()                    { *m = PageSize{} }
func (m *PageSize) String() string            { return proto.CompactTextString(m) }
func (*PageSize) ProtoMessage()               {}
func (*PageSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Resolution struct {
	HorizontalDpi int32 `protobuf:"varint,1,opt,name=horizontalDpi" json:"horizontalDpi,omitempty"`
	VerticalDpi   int32 `protobuf:"varint,2,opt,name=verticalDpi" json:"verticalDpi,omitempty"`
	IsDefault     bool  `protobuf:"varint,3,opt,name=isDefault" json:"isDefault,omitempty"`
}

func (m *Resolution) Reset()                    { *m = Resolution{} }
func (m *Resolution) String() string            { return proto.CompactTextString(m) }
func (*Resolution) ProtoMessage()               {}
func (*Resolution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PrintServ struct {
	Name       string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PageSize   []*PageSize   `protobuf:"bytes,2,rep,name=pageSize" json:"pageSize,omitempty"`
	Resolution []*Resolution `protobuf:"bytes,3,rep,name=resolution" json:"resolution,omitempty"`
}

func (m *PrintServ) Reset()                    { *m = PrintServ{} }
func (m *PrintServ) String() string            { return proto.CompactTextString(m) }
func (*PrintServ) ProtoMessage()               {}
func (*PrintServ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PrintServ) GetPageSize() []*PageSize {
	if m != nil {
		return m.PageSize
	}
	return nil
}

func (m *PrintServ) GetResolution() []*Resolution {
	if m != nil {
		return m.Resolution
	}
	return nil
}

type PrintServices struct {
	Name         []string     `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	PrintService []*PrintServ `protobuf:"bytes,2,rep,name=printService" json:"printService,omitempty"`
}

func (m *PrintServices) Reset()                    { *m = PrintServices{} }
func (m *PrintServices) String() string            { return proto.CompactTextString(m) }
func (*PrintServices) ProtoMessage()               {}
func (*PrintServices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PrintServices) GetPrintService() []*PrintServ {
	if m != nil {
		return m.PrintService
	}
	return nil
}

func init() {
	proto.RegisterType((*PrintContent)(nil), "print.PrintContent")
	proto.RegisterType((*PrintInfo)(nil), "print.PrintInfo")
	proto.RegisterType((*PageRange)(nil), "print.PageRange")
	proto.RegisterType((*PrintResponse)(nil), "print.PrintResponse")
	proto.RegisterType((*Empty)(nil), "print.Empty")
	proto.RegisterType((*PageSize)(nil), "print.PageSize")
	proto.RegisterType((*Resolution)(nil), "print.Resolution")
	proto.RegisterType((*PrintServ)(nil), "print.PrintServ")
	proto.RegisterType((*PrintServices)(nil), "print.PrintServices")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ServerPrintService service

type ServerPrintServiceClient interface {
	GetPrintServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintServices, error)
	// Print
	Print(ctx context.Context, opts ...grpc.CallOption) (ServerPrintService_PrintClient, error)
}

type serverPrintServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerPrintServiceClient(cc *grpc.ClientConn) ServerPrintServiceClient {
	return &serverPrintServiceClient{cc}
}

func (c *serverPrintServiceClient) GetPrintServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrintServices, error) {
	out := new(PrintServices)
	err := grpc.Invoke(ctx, "/print.ServerPrintService/GetPrintServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverPrintServiceClient) Print(ctx context.Context, opts ...grpc.CallOption) (ServerPrintService_PrintClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServerPrintService_serviceDesc.Streams[0], c.cc, "/print.ServerPrintService/Print", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverPrintServicePrintClient{stream}
	return x, nil
}

type ServerPrintService_PrintClient interface {
	Send(*PrintContent) error
	CloseAndRecv() (*PrintResponse, error)
	grpc.ClientStream
}

type serverPrintServicePrintClient struct {
	grpc.ClientStream
}

func (x *serverPrintServicePrintClient) Send(m *PrintContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverPrintServicePrintClient) CloseAndRecv() (*PrintResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PrintResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServerPrintService service

type ServerPrintServiceServer interface {
	GetPrintServices(context.Context, *Empty) (*PrintServices, error)
	// Print
	Print(ServerPrintService_PrintServer) error
}

func RegisterServerPrintServiceServer(s *grpc.Server, srv ServerPrintServiceServer) {
	s.RegisterService(&_ServerPrintService_serviceDesc, srv)
}

func _ServerPrintService_GetPrintServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ServerPrintServiceServer).GetPrintServices(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ServerPrintService_Print_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerPrintServiceServer).Print(&serverPrintServicePrintServer{stream})
}

type ServerPrintService_PrintServer interface {
	SendAndClose(*PrintResponse) error
	Recv() (*PrintContent, error)
	grpc.ServerStream
}

type serverPrintServicePrintServer struct {
	grpc.ServerStream
}

func (x *serverPrintServicePrintServer) SendAndClose(m *PrintResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverPrintServicePrintServer) Recv() (*PrintContent, error) {
	m := new(PrintContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServerPrintService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "print.ServerPrintService",
	HandlerType: (*ServerPrintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrintServices",
			Handler:    _ServerPrintService_GetPrintServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Print",
			Handler:       _ServerPrintService_Print_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x54, 0xdf, 0x6b, 0xdb, 0x30,
	0x10, 0xce, 0x8f, 0x3a, 0x89, 0x2f, 0xe9, 0xd6, 0xaa, 0x61, 0x98, 0x32, 0x46, 0x30, 0x63, 0x2b,
	0x0c, 0xc2, 0xd6, 0x8d, 0xb1, 0xe7, 0xb6, 0x63, 0xdd, 0x43, 0x47, 0x50, 0x07, 0x63, 0x4f, 0xc5,
	0xb5, 0xd5, 0x44, 0xe0, 0x58, 0x46, 0x56, 0xb2, 0xb5, 0x0c, 0xf6, 0xb6, 0x7f, 0x7a, 0x2f, 0x95,
	0xce, 0xb2, 0x2d, 0xe7, 0x4d, 0xfa, 0xee, 0xd3, 0xdd, 0x77, 0x77, 0x9f, 0x0d, 0xe3, 0x5c, 0xf2,
	0x4c, 0xcd, 0x73, 0x29, 0x94, 0x20, 0x1e, 0x5e, 0x42, 0x09, 0x93, 0x85, 0x39, 0x9c, 0x8b, 0x4c,
	0xb1, 0x4c, 0x91, 0xb7, 0xe0, 0x63, 0xe0, 0x6b, 0x76, 0x27, 0x82, 0xee, 0xac, 0x7b, 0x32, 0x3e,
	0x3d, 0x98, 0x97, 0xef, 0x16, 0x15, 0x7e, 0xd9, 0xa1, 0x0d, 0x89, 0x1c, 0xc3, 0x30, 0x2e, 0x1f,
	0x07, 0x3d, 0xcd, 0x9f, 0xe8, 0x68, 0x05, 0x9c, 0x4d, 0x81, 0x20, 0xf1, 0xc6, 0x02, 0x37, 0xea,
	0x3e, 0x67, 0xe1, 0xff, 0x1e, 0xf8, 0x75, 0x32, 0x32, 0xb3, 0xba, 0x98, 0xfc, 0x16, 0xad, 0x19,
	0xd6, 0xf4, 0xa9, 0x0b, 0x91, 0xe7, 0xe0, 0xaf, 0x59, 0xc2, 0xa3, 0x6b, 0xfe, 0xc0, 0xb0, 0x86,
	0x4f, 0x1b, 0xc0, 0xbc, 0x17, 0x92, 0xeb, 0xe4, 0x91, 0xe2, 0x22, 0x0b, 0xfa, 0x3a, 0xee, 0x51,
	0x17, 0x22, 0x2f, 0x61, 0x3f, 0x8f, 0x96, 0xcc, 0xb0, 0x7f, 0xf0, 0x44, 0xad, 0x82, 0x3d, 0xe4,
	0xb4, 0x41, 0xf2, 0x0a, 0x9e, 0x54, 0xc0, 0x25, 0xe3, 0xcb, 0x95, 0x0a, 0x3c, 0xa4, 0xed, 0xa0,
	0x46, 0x4d, 0x2c, 0x52, 0x21, 0xaf, 0x44, 0xc2, 0x82, 0x01, 0x52, 0x1a, 0x80, 0xbc, 0x00, 0x48,
	0x36, 0x79, 0xca, 0x7e, 0x63, 0x78, 0x88, 0x61, 0x07, 0x21, 0x73, 0x3d, 0x5f, 0x9d, 0x8f, 0x46,
	0xd9, 0x92, 0x05, 0xa3, 0x59, 0xdf, 0x9d, 0x6f, 0x85, 0xd3, 0x86, 0x42, 0x9e, 0xc1, 0x20, 0x16,
	0x39, 0x67, 0x45, 0xe0, 0x63, 0x2e, 0x7b, 0x23, 0x53, 0xf0, 0xd2, 0xe8, 0x96, 0xa5, 0x01, 0xe0,
	0x3c, 0xca, 0x0b, 0x09, 0x61, 0x12, 0x4b, 0x86, 0x5d, 0x7f, 0xe7, 0x7a, 0x98, 0x63, 0x1d, 0xec,
	0xd3, 0x16, 0x16, 0x9e, 0xeb, 0xe1, 0xd7, 0xe9, 0x75, 0x33, 0x85, 0x8a, 0xa4, 0x32, 0x08, 0x8e,
	0x5e, 0x37, 0x53, 0x03, 0x24, 0x80, 0x21, 0xcb, 0x12, 0x8c, 0xf5, 0x30, 0x56, 0x5d, 0xc3, 0xd7,
	0xb0, 0x8f, 0x1b, 0xa4, 0xac, 0xc8, 0x45, 0x56, 0xa0, 0x4e, 0xc9, 0x8a, 0x4d, 0xaa, 0x6c, 0x16,
	0x7b, 0x0b, 0x87, 0xe0, 0x7d, 0x5e, 0xe7, 0xea, 0x3e, 0xfc, 0x03, 0xa3, 0x85, 0x1d, 0x64, 0x23,
	0xbe, 0xeb, 0x8a, 0xd7, 0x5a, 0x7e, 0x99, 0x4d, 0x5c, 0xf1, 0xb4, 0xb0, 0xf5, 0x1a, 0xc0, 0x0c,
	0x76, 0x85, 0x0b, 0xc0, 0x70, 0xb9, 0x65, 0x07, 0x31, 0xaf, 0x79, 0x71, 0xc1, 0xee, 0x22, 0xa3,
	0xc1, 0x2c, 0x78, 0x44, 0x1b, 0x40, 0xdb, 0x1c, 0xb4, 0x54, 0x91, 0x6e, 0x2a, 0x43, 0xac, 0xb4,
	0x41, 0x1e, 0xb4, 0x29, 0xa3, 0xf4, 0x22, 0xe7, 0x56, 0x73, 0x1b, 0x34, 0xc6, 0xda, 0x32, 0xa9,
	0x78, 0x5c, 0x72, 0x4a, 0x45, 0x2e, 0xd4, 0xae, 0xd9, 0xdf, 0xad, 0xf9, 0xd7, 0xba, 0xfc, 0x9a,
	0xc9, 0x2d, 0x21, 0xb0, 0x97, 0x35, 0xf6, 0xc6, 0x33, 0x79, 0x03, 0xa3, 0xca, 0x5b, 0x3a, 0xbb,
	0xb1, 0xc2, 0x53, 0xc7, 0x0a, 0x06, 0xa6, 0x35, 0x81, 0xbc, 0x03, 0x90, 0x75, 0x07, 0xba, 0x98,
	0xa1, 0x1f, 0x5a, 0x7a, 0xd3, 0x1a, 0x75, 0x48, 0xe1, 0x4f, 0xbb, 0x24, 0x23, 0x80, 0xc7, 0xda,
	0x34, 0x8d, 0x88, 0x7e, 0x2d, 0xe2, 0x03, 0x4c, 0x72, 0x87, 0x64, 0x85, 0xb4, 0xbe, 0x79, 0x13,
	0xa2, 0x2d, 0xd6, 0xe9, 0xbf, 0x2e, 0x10, 0x73, 0x66, 0xd2, 0xad, 0x40, 0x3e, 0xc1, 0xc1, 0x17,
	0xa6, 0xda, 0x45, 0x27, 0x36, 0x15, 0xda, 0xe0, 0x78, 0xba, 0x9b, 0xd8, 0x70, 0xc2, 0x0e, 0xf9,
	0x08, 0x1e, 0x42, 0xe4, 0xc8, 0x25, 0xd8, 0xbf, 0x52, 0xfb, 0x55, 0xe5, 0xb9, 0xb0, 0x73, 0xd2,
	0x3d, 0x3b, 0x82, 0xc3, 0x58, 0xac, 0xe7, 0xba, 0xe7, 0x6d, 0xc4, 0x97, 0x25, 0xed, 0x76, 0x80,
	0xbf, 0xb8, 0xf7, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x50, 0x42, 0x46, 0xf1, 0x04, 0x00,
	0x00,
}
