; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Direct Print Server"
#define MyAppVersion "1.0"
#define MyAppPublisher "JSC Solvaig"
#define MyAppURL "https://github.com/procks/direct_print_server"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{215ED57E-4DC9-40EA-85E2-4A326D2C0419}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\DirectPrintServer
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir=Output
OutputBaseFilename=DirectPrintServerSetup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"
Name: "ru"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "uk"; MessagesFile: "compiler:Languages\Ukrainian.isl"

[CustomMessages]
en.ServiceAccountInformation=Log on Service as:
ru.ServiceAccountInformation=Запускать сервис от имени: 
uk.ServiceAccountInformation=Log on Service as:

[Files]
Source: "Files\prunsrv.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\gsdll32.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\gswin32c.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\install.cmd"; DestDir: "{app}"; Flags: ignoreversion   
Source: "Files\install_ex.cmd"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\LICENSE.txt"; DestDir: "{app}"; Flags: ignoreversion  
Source: "Files\PrintServer.jar"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\prunmgr.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\prunsrv.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "Files\uninstall.cmd"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Run]
Filename: "{app}\install.cmd"; Parameters: "{code:GetUserName} {code:GetPassword}"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Installing service"

[UninstallRun]     
Filename: "{app}\uninstall.cmd"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Uninstalling service"

[Code]
var
  Page: TInputQueryWizardPage;
  LocalSystemAccountCheckBox: TNewCheckBox;
  LabelFolder: TLabel;  
//  MainPage: TWizardPage;  
  UserEdit: TNewEdit;      
  PassEdit: TNewEdit;      
  ConfPassEdit: TNewEdit; 
  UserStaticText: TNewStaticText;        
  PassStaticText: TNewStaticText;      
  ConfPassStaticText: TNewStaticText;

procedure LocalSystemAccountCheckBoxOnClick(Sender: TObject);
begin
  if LocalSystemAccountCheckBox.Checked then begin
    UserStaticText.Enabled := false;
    UserEdit.Enabled := false;
    PassStaticText.Enabled := false;
    PassEdit.Enabled := false;
    ConfPassStaticText.Enabled := false;
    ConfPassEdit.Enabled := false;
  end
  else begin
    UserStaticText.Enabled := true;
    UserEdit.Enabled := true;
    PassStaticText.Enabled := true;
    PassEdit.Enabled := true;
    ConfPassStaticText.Enabled := true;
    ConfPassEdit.Enabled := true;
  end;
end;

procedure InitializeWizard;
begin
  Page := CreateInputQueryPage(wpWelcome, //wpSelectComponents,
    CustomMessage('ServiceAccountInformation'), 'Please enter account information',
    '');

  LocalSystemAccountCheckBox := TNewCheckBox.Create(Page);
  LocalSystemAccountCheckBox.Parent := Page.Surface;
  LocalSystemAccountCheckBox.Width := ScaleX(200);
  LocalSystemAccountCheckBox.Caption := 'Local system account'; 
  LocalSystemAccountCheckBox.Checked := true;
  LocalSystemAccountCheckBox.OnClick := @LocalSystemAccountCheckBoxOnClick;
  
  UserStaticText := TNewStaticText.Create(Page);
  UserStaticText.Top := LocalSystemAccountCheckBox.Top + LocalSystemAccountCheckBox.Height + ScaleY(12);
  UserStaticText.Caption := 'User';
  UserStaticText.AutoSize := True;
  UserStaticText.Parent := Page.Surface; 
  UserStaticText.Enabled := false;

  UserEdit := TNewEdit.Create(Page);
  UserEdit.Parent := Page.Surface;
  UserEdit.Top := LocalSystemAccountCheckBox.Top + LocalSystemAccountCheckBox.Height + ScaleY(8);
  UserEdit.Left := ScaleX(100);
  UserEdit.Width := ScaleX(150);
  UserEdit.Enabled := false;

  PassStaticText := TNewStaticText.Create(Page);
  PassStaticText.Top := UserEdit.Top + UserEdit.Height + ScaleY(12);
  PassStaticText.Caption := 'Password';
  PassStaticText.AutoSize := True;
  PassStaticText.Parent := Page.Surface;
  PassStaticText.Enabled := false;

  PassEdit := TNewEdit.Create(Page);
  PassEdit.Parent := Page.Surface;
  PassEdit.Top := UserEdit.Top + UserEdit.Height + ScaleY(8);
  PassEdit.Left := UserEdit.Left;
  PassEdit.Width := UserEdit.Width; 
  PassEdit.PasswordChar := '*';
  PassEdit.Enabled := false;

  ConfPassStaticText := TNewStaticText.Create(Page);
  ConfPassStaticText.Top := PassEdit.Top + PassEdit.Height + ScaleY(12);
  ConfPassStaticText.Caption := 'Confirm password';
  ConfPassStaticText.AutoSize := True;
  ConfPassStaticText.Parent := Page.Surface;
  ConfPassStaticText.Enabled := false;

  ConfPassEdit := TNewEdit.Create(Page);
  ConfPassEdit.Parent := Page.Surface;
  ConfPassEdit.Top := PassEdit.Top + PassEdit.Height + ScaleY(8);
  ConfPassEdit.Left := UserEdit.Left;
  ConfPassEdit.Width := UserEdit.Width; 
  ConfPassEdit.PasswordChar := '*';
  ConfPassEdit.Enabled := false;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
begin                         
  Result := true;
  Log('NextButtonClick(' + IntToStr(CurPageID) + ') called');
  case CurPageID of
    Page.ID: begin
      if not LocalSystemAccountCheckBox.Checked then begin
        if UserEdit.Text = '' then begin          
          Result := false;
          MsgBox('Pleas enter User', mbInformation, MB_OK);
          exit; 
        end;
        if not (ConfPassEdit.Text = PassEdit.Text) then begin
          Result := false; 
          MsgBox('Password does not match the confirm password', mbInformation, MB_OK);
          exit; 
        end;
      end; 
    end;
  end;
end;

function GetUserName(Param: String): string;
begin
  result := '.\' + UserEdit.Text;
end;

function GetPassword(Param: String): string;
begin
  result := PassEdit.Text;
end;

procedure CurUninstallStepChanged (CurUninstallStep: TUninstallStep);
var
  mres : integer;
  ResultCode: Integer;
begin
  case CurUninstallStep of
    usPostUninstall:
      begin
//        mres := MsgBox('Do you want to delete saved files?', mbConfirmation, MB_YESNO or MB_DEFBUTTON2)
//        if mres = IDYES then
        DelTree(ExpandConstant('{userappdata}\DirectPrintServiceLogs'), True, True, True);
      end;  
  end;
end;